[{"/Users/Kristen/Desktop/CS124/cs124_lab3/src/index.js":"1","/Users/Kristen/Desktop/CS124/cs124_lab3/src/App.js":"2","/Users/Kristen/Desktop/CS124/cs124_lab3/src/reportWebVitals.js":"3","/Users/Kristen/Desktop/CS124/cs124_lab3/src/Alert.js":"4","/Users/Kristen/Desktop/CS124/cs124_lab3/src/DropdownButton.js":"5","/Users/Kristen/Desktop/CS124/cs124_lab3/src/TaskContainer.js":"6","/Users/Kristen/Desktop/CS124/cs124_lab3/src/TaskItem.js":"7"},{"size":500,"mtime":1635375987005,"results":"8","hashOfConfig":"9"},{"size":8870,"mtime":1635899479042,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1635375987006,"results":"11","hashOfConfig":"9"},{"size":713,"mtime":1635375987003,"results":"12","hashOfConfig":"9"},{"size":1451,"mtime":1635375987004,"results":"13","hashOfConfig":"9"},{"size":341,"mtime":1635871088820,"results":"14","hashOfConfig":"9"},{"size":926,"mtime":1635903168296,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1uj6tx4",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Kristen/Desktop/CS124/cs124_lab3/src/index.js",[],["32","33"],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/App.js",["34","35","36","37"],"import './App.css';\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport Alert from \"./Alert\";\nimport DropdownButton from \"./DropdownButton\";\nimport TaskContainer from \"./TaskContainer\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport firebase from \"firebase/compat\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCd9qqxvMpEKpBzwfWcc2tlRFa6ICaLH_s\",\n    authDomain: \"hmc-cs124-fa21-labs.firebaseapp.com\",\n    projectId: \"hmc-cs124-fa21-labs\",\n    storageBucket: \"hmc-cs124-fa21-labs.appspot.com\",\n    messagingSenderId: \"949410042946\",\n    appId: \"1:949410042946:web:0113b139a7e3cd1cc709db\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\n\nlet currentDeleteOption = \"\";\n\nconst dropdownOptions = {\n    option1: \"All Tasks\",\n    option2: \"Completed Tasks\",\n    option3: \"Uncompleted Tasks\"\n}\n\nconst menuItems = [\n    {\n        id: \"view\",\n        name: \"View\"\n    },\n    {\n        id: \"trash\",\n        name: \"ðŸ—‘\",\n    }\n]\n\nfunction App() {\n    const [sort, setSort] = useState(\"Date Created\");\n    const [showAlert, setShowAlert] = useState(false);\n    const [currView, setCurrView] = useState(\"All Tasks\");\n\n    let query = db.collection('hilnels-hmc-tasks');\n    const collection = db.collection('hilnels-hmc-tasks');\n\n    if (currView === \"All Tasks\") {\n        if (sort === \"Name: A to Z\") {\n            query = db.collection('hilnels-hmc-tasks').orderBy(\"name\", \"desc\");\n        } else if (sort === \"Name: Z to A\") {\n            query = db.collection('hilnels-hmc-tasks').orderBy(\"name\", \"asc\");\n        } else if (sort === \"Priority: High to Low\") {\n            query = db.collection('hilnels-hmc-tasks').orderBy(\"priority\", \"desc\");\n        } else if (sort === \"Priority: Low to High\") {\n            query = db.collection('hilnels-hmc-tasks').orderBy(\"priority\", \"asc\");\n        } else {\n            query = db.collection('hilnels-hmc-tasks').orderBy(\"created\", \"asc\");\n        }\n\n        query.orderBy(\"created\", \"asc\");\n    } else if (currView === \"Completed Tasks\") {\n        query = db.collection('hilnels-hmc-tasks').where(\"checked\", \"==\", true);\n    } else {\n        query = db.collection('hilnels-hmc-tasks').where(\"checked\", \"==\", false);\n    }\n\n    const [value, loading, error] = useCollection(query);\n    let data = []\n\n    if (value) {\n        data = value.docs.map(e => {\n            return {...e.data(), id: e.id}\n        });\n        data = data.reverse();\n    }\n\n    if (sort === \"Name: A to Z\") {\n        data = data.sort((a, b) => (a.name.toUpperCase() > b.name.toUpperCase()) ? 1 : -1)\n    } else if (sort === \"Name: Z to A\") {\n        data = data.sort((a, b) => (a.name.toUpperCase() < b.name.toUpperCase()) ? 1 : -1)\n    } else if (sort === \"Date Created\") {\n        data = data.sort((a, b) => (a.created < b.created) ? 1 : -1)\n    } else if (sort === \"Priority: High to Low\") {\n        data = data.sort((a, b) => (a.priority > b.priority) ? 1 : -1)\n    } else if (sort === \"Priority: Low to High\") {\n        data = data.sort((a, b) => (a.priority < b.priority) ? 1 : -1)\n    }\n\n    function toggleModal() {\n        setShowAlert(!showAlert);\n    }\n\n    function setCurrentDeleteOption(currDelete) {\n        currentDeleteOption = currDelete;\n    }\n\n    function handleTaskNameChange(e, id) {\n        // let taskIndex = tasks.findIndex(e => e.id === id);\n        // tasks[taskIndex].name = e.target.value\n        // console.log(tasks)\n        // setTasks(tasks);\n\n        collection.doc(id).update({name: e.target.value});\n\n    }\n\n    function toggleCheckbox(id) {\n        console.log(\"in toggle checkbox\")\n        const oldChecked = data.find(e => e.id === id).checked;\n        console.log(oldChecked);\n        collection.doc(id).update({checked: !oldChecked})\n    }\n\n    function handleDeleteTasks(ids) {\n        ids.forEach(id => db.collection('hilnels-hmc-tasks').doc(id).delete());\n    }\n\n    function deleteOrView(id, option) {\n        if (id === \"trash\") {\n            if (option === \"All Tasks\") {\n                let ids = data.map(e => e.id);\n                handleDeleteTasks(ids);\n            } else if (option === \"Completed Tasks\") {\n                let ids = data.map(e => {\n                    if (e.checked) return e.id\n                });\n                handleDeleteTasks(ids);\n            } else if (option === \"Uncompleted Tasks\") {\n                let ids = data.map(e => {\n                    if (!e.checked) return e.id\n                });\n                handleDeleteTasks(ids);\n            }\n        }\n        if (id === \"view\") {\n            if (option === \"All Tasks\") {\n                setCurrView(\"All Tasks\")\n            } else if (option === \"Completed Tasks\") {\n                setCurrView(\"Completed Tasks\")\n            } else if (option === \"Uncompleted Tasks\") {\n                setCurrView(\"Uncompleted Tasks\")\n            }\n        }\n    }\n\n    function showTask(task) {\n        return ((currView === \"All Tasks\") || (currView === \"Completed Tasks\" && task.checked) || (currView === \"Uncompleted Tasks\" && !task.checked))\n    }\n\n    function updatePriority(id, priority) {\n        collection.doc(id).update({priority: priority})\n    }\n\n    // a is highest priority\n    function makeNewItem() {\n        const newId = generateUniqueID();\n        collection.doc(newId).set({\n            id: newId,\n            name: \"\",\n            checked: false,\n            priority: \"c\",\n            created: firebase.database.ServerValue.TIMESTAMP\n        })\n    }\n\n    return <div>\n        {\n            loading ? <div>Loading...</div> :\n                <div className=\"App\">\n                    <div className=\"buttons-and-tasks\">\n                        <div id=\"fixed-buttons\">\n                            {showAlert &&\n                            <Alert onClose={toggleModal} onOK={() => deleteOrView(\"trash\", currentDeleteOption)}\n                                   dropdownOptions={dropdownOptions}>\n                                {(currentDeleteOption === \"All Tasks\") ? <div>\n                                        Are you sure you want to delete all {data.length} task(s)?\n                                    </div> :\n                                    (currentDeleteOption === \"Uncompleted Tasks\") ?\n                                        <div>\n                                            Are you sure you want to\n                                            delete {data.filter(e => !e.checked).length} uncompleted task(s)?\n                                        </div> :\n                                        <div>\n                                            Are you sure you want to\n                                            delete {data.filter(e => e.checked).length} completed task(s)?\n                                        </div>}\n                            </Alert>}\n                            <h2 className=\"start\">Tasks</h2>\n                            <div className=\"menu-buttons-container\">\n                            <div className=\"dropdown\" id=\"new-item-button\">\n                                <button type=\"button\" className=\"menu-buttons\" onClick={makeNewItem}>New Item</button>\n                            </div>\n                            {menuItems.map(e => <DropdownButton key={e.id}\n                                                                setCurrentDeleteOption={setCurrentDeleteOption}\n                                                                toggleModal={toggleModal} tasksData={data} {...e}\n                                                                options={dropdownOptions}\n                                                                deleteOrView={deleteOrView}/>)}\n                        </div>\n                        {(currView === \"All Tasks\") && <div id=\"sorting-area\">\n<span>\n\n<div id=\"sort\">\n<div id=\"sort-label\">Sort By:</div>\n<select name=\"sorting\" id=\"task-sorting\" onChange={e => setSort(e.target.value)}>\n<option selected hidden>Sort By:</option>\n<option value=\"Date Created\" selected={\"Date Created\" === sort}>Date Created</option>\n<option value=\"Name: A to Z\" selected={\"Name: A to Z\" === sort}>Name: A to Z</option>\n<option value=\"Name: Z to A\" selected={\"Name: Z to A\" === sort}>Name: Z to A</option>\n<option value=\"Priority: High to Low\" selected={\"Priority: High to Low\" === sort}>Priority: High to Low</option>\n<option value=\"Priority: Low to High\" selected={\"Priority: Low to High\" === sort}>Priority: Low to High</option>\n</select>\n</div>\n</span>\n                        </div>}\n                        </div>\n                        <TaskContainer handleTaskNameChange={handleTaskNameChange} tasksData={data}\n                                       toggleCheckbox={toggleCheckbox} updatePriority={updatePriority}/>\n                    </div>\n                </div>\n        }\n    </div>;\n}\n\nexport default App;","/Users/Kristen/Desktop/CS124/cs124_lab3/src/reportWebVitals.js",[],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/Alert.js",[],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/DropdownButton.js",[],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/TaskContainer.js",[],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/TaskItem.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":69,"column":28,"nodeType":"44","messageId":"45","endLine":69,"endColumn":33},{"ruleId":"46","severity":1,"message":"47","line":126,"column":38,"nodeType":"48","messageId":"49","endLine":126,"endColumn":40},{"ruleId":"46","severity":1,"message":"47","line":131,"column":38,"nodeType":"48","messageId":"49","endLine":131,"endColumn":40},{"ruleId":"42","severity":1,"message":"50","line":148,"column":14,"nodeType":"44","messageId":"45","endLine":148,"endColumn":22},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'showTask' is defined but never used.","no-global-assign","no-unsafe-negation"]