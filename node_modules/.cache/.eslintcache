[{"/Users/Kristen/Desktop/CS124/cs124_lab3/src/index.js":"1","/Users/Kristen/Desktop/CS124/cs124_lab3/src/App.js":"2","/Users/Kristen/Desktop/CS124/cs124_lab3/src/reportWebVitals.js":"3","/Users/Kristen/Desktop/CS124/cs124_lab3/src/Alert.js":"4","/Users/Kristen/Desktop/CS124/cs124_lab3/src/DropdownButton.js":"5","/Users/Kristen/Desktop/CS124/cs124_lab3/src/TaskContainer.js":"6","/Users/Kristen/Desktop/CS124/cs124_lab3/src/TaskItem.js":"7"},{"size":500,"mtime":1635375987005,"results":"8","hashOfConfig":"9"},{"size":5946,"mtime":1635533678833,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1635375987006,"results":"11","hashOfConfig":"9"},{"size":713,"mtime":1635375987003,"results":"12","hashOfConfig":"9"},{"size":1451,"mtime":1635375987004,"results":"13","hashOfConfig":"9"},{"size":341,"mtime":1635533441853,"results":"14","hashOfConfig":"9"},{"size":655,"mtime":1635533734148,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1uj6tx4",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Kristen/Desktop/CS124/cs124_lab3/src/index.js",[],["32","33"],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/App.js",["34","35","36","37"],"import './App.css';\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport Alert from \"./Alert\";\nimport DropdownButton from \"./DropdownButton\";\nimport TaskContainer from \"./TaskContainer\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport firebase from \"firebase/compat\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCd9qqxvMpEKpBzwfWcc2tlRFa6ICaLH_s\",\n  authDomain: \"hmc-cs124-fa21-labs.firebaseapp.com\",\n  projectId: \"hmc-cs124-fa21-labs\",\n  storageBucket: \"hmc-cs124-fa21-labs.appspot.com\",\n  messagingSenderId: \"949410042946\",\n  appId: \"1:949410042946:web:0113b139a7e3cd1cc709db\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\n\nlet currentDeleteOption = \"\";\n\nconst dropdownOptions = {\n  option1: \"All Tasks\",\n  option2: \"Completed Tasks\",\n  option3: \"Uncompleted Tasks\"\n}\n\nconst menuItems = [\n  {\n    id: \"view\",\n    name: \"View\"\n  },\n  {\n    id: \"trash\",\n    name: \"ðŸ—‘\",\n  }\n]\n\nfunction App() {\n  const [sort, setSort] = useState(\"A to Z\");\n  const [showAlert, setShowAlert] = useState(false);\n  const [currView, setCurrView] = useState(\"All Tasks\");\n\n  let query = db.collection('hilnels-hmc-tasks');\n  const collection = db.collection('hilnels-hmc-tasks');\n\n  if(currView === \"All Tasks\"){\n    query = db.collection('hilnels-hmc-tasks');\n  } else if (currView === \"Completed Tasks\") {\n    query = db.collection('hilnels-hmc-tasks').where(\"checked\", \"==\", true);\n  } else {\n    query = db.collection('hilnels-hmc-tasks').where(\"checked\", \"==\", false);\n  }\n  const [value, loading, error] = useCollection(query);\n  let data = []\n\n  if (value) {\n    data = value.docs.map(e => {return { ...e.data(), id: e.id }});\n  }\n\n  function toggleModal() {\n    setShowAlert(!showAlert);\n  }\n\n  function setCurrentDeleteOption(currDelete) {\n    currentDeleteOption = currDelete;\n  }\n\n  function handleTaskNameChange(e, id) {\n    // let taskIndex = tasks.findIndex(e => e.id === id);\n    // tasks[taskIndex].name = e.target.value\n    // console.log(tasks)\n    // setTasks(tasks);\n\n    collection.doc(id).update({name: e.target.value});\n\n  }\n\n  function toggleCheckbox(id) {\n    console.log(\"in toggle checkbox\")\n    const oldChecked = data.find(e => e.id === id).checked;\n    console.log(oldChecked);\n    collection.doc(id).update({checked: !oldChecked})\n  }\n\n  function handleDeleteTasks(ids) {\n    ids.forEach(id => db.collection('hilnels-hmc-tasks').doc(id).delete());\n  }\n\n  function deleteOrView(id, option) {\n    if (id === \"trash\") {\n      if (option === \"All Tasks\") {\n        let ids = data.map(e => e.id);\n        handleDeleteTasks(ids);\n      } else if (option === \"Completed Tasks\") {\n        let ids = data.map(e => {if (e.checked) return e.id});\n        handleDeleteTasks(ids);\n      } else if (option === \"Uncompleted Tasks\") {\n        let ids = data.map(e => {if (!e.checked) return e.id});\n        handleDeleteTasks(ids);\n      }\n    }\n    if (id === \"view\") {\n      if (option === \"All Tasks\") {\n        setCurrView(\"All Tasks\")\n      } else if (option === \"Completed Tasks\") {\n        setCurrView(\"Completed Tasks\")\n      } else if (option === \"Uncompleted Tasks\") {\n        setCurrView(\"Uncompleted Tasks\")\n      }\n    }\n  }\n\n  function showTask(task) {\n    return ((currView === \"All Tasks\") || (currView === \"Completed Tasks\" && task.checked) || (currView === \"Uncompleted Tasks\" && !task.checked))\n  }\n\n  function updatePriority(id, priority) {\n    collection.doc(id).update( {priority: priority})\n  }\n\n  function makeNewItem() {\n    const newId = generateUniqueID();\n    collection.doc(newId).set({id: newId, name: \"Click to Enter Task\", checked: false, priority: \"High\"})\n  }\n\n  return <div>\n      {\n        loading ? <div>Loading...</div> :\n      <div className=\"App\">\n        <h2>Tasks</h2>\n        {showAlert && <Alert onClose={toggleModal} onOK={() => deleteOrView(\"trash\", currentDeleteOption)} dropdownOptions={dropdownOptions}>\n          <div>\n            Are you sure you want to delete these tasks?\n          </div>\n        </Alert>}\n        <div className=\"buttons-and-tasks\">\n          <div className=\"menu-buttons-container\">\n            <div className=\"dropdown\" id=\"new-item-button\">\n              <button type=\"button\" className=\"menu-buttons\" onClick={makeNewItem}>New Item</button>\n            </div>\n            {menuItems.map(e => <DropdownButton key={e.id} setCurrentDeleteOption={setCurrentDeleteOption}  toggleModal={toggleModal} tasksData={data} {...e} options={dropdownOptions} deleteOrView={deleteOrView}/>)}\n          </div>\n          <div id=\"sorting-area\">\n          <span>\n              <select name=\"sorting\" id=\"task-sorting\">\n                <option selected hidden>Sort By:</option>\n                <option value=\"Name: A to Z\" onClick={() => {\n                  setSort(\"Name: A to Z\");\n                  console.log(sort);\n                }}>Name: A to Z</option>\n                <option value=\"Name: Z to A\" onClick={() => {\n                  setSort(\"Name: Z to A\");\n                  console.log(sort);\n                }}>Name: Z to A</option>\n                <option value=\"Priority: High to Low\" onClick={() => {\n                  setSort(\"Priority: High to Low\");\n                  console.log(sort);\n                }}>Priority: High to Low</option>\n                <option value=\"Priority: Low to High\" onClick={() => {\n                  setSort(\"Priority: Low to High\");\n                  console.log(sort);\n                }}>Priority: Low to High</option>\n                <option value=\"Date Created\" onClick={() =>{setSort(\"Date Created\");\n                console.log(sort);}}>Date Created</option>\n            </select>\n        </span>\n          </div>\n          <TaskContainer handleTaskNameChange={handleTaskNameChange} tasksData={data} toggleCheckbox={toggleCheckbox} updatePriority={updatePriority}/>\n        </div>\n      </div>\n  }\n  </div>;\n}\n\nexport default App;\n","/Users/Kristen/Desktop/CS124/cs124_lab3/src/reportWebVitals.js",[],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/Alert.js",[],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/DropdownButton.js",[],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/TaskContainer.js",[],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/TaskItem.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":56,"column":26,"nodeType":"44","messageId":"45","endLine":56,"endColumn":31},{"ruleId":"46","severity":1,"message":"47","line":98,"column":30,"nodeType":"48","messageId":"49","endLine":98,"endColumn":32},{"ruleId":"46","severity":1,"message":"47","line":101,"column":30,"nodeType":"48","messageId":"49","endLine":101,"endColumn":32},{"ruleId":"42","severity":1,"message":"50","line":116,"column":12,"nodeType":"44","messageId":"45","endLine":116,"endColumn":20},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'showTask' is defined but never used.","no-global-assign","no-unsafe-negation"]