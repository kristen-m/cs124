[{"/Users/Kristen/Desktop/CS124/cs124_lab3/src/index.js":"1","/Users/Kristen/Desktop/CS124/cs124_lab3/src/App.js":"2","/Users/Kristen/Desktop/CS124/cs124_lab3/src/reportWebVitals.js":"3","/Users/Kristen/Desktop/CS124/cs124_lab3/src/Alert.js":"4","/Users/Kristen/Desktop/CS124/cs124_lab3/src/DropdownButton.js":"5","/Users/Kristen/Desktop/CS124/cs124_lab3/src/TaskContainer.js":"6","/Users/Kristen/Desktop/CS124/cs124_lab3/src/TaskItem.js":"7"},{"size":500,"mtime":1635375987005,"results":"8","hashOfConfig":"9"},{"size":4813,"mtime":1635528903439,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1635375987006,"results":"11","hashOfConfig":"9"},{"size":713,"mtime":1635375987003,"results":"12","hashOfConfig":"9"},{"size":1451,"mtime":1635375987004,"results":"13","hashOfConfig":"9"},{"size":303,"mtime":1635375987005,"results":"14","hashOfConfig":"9"},{"size":430,"mtime":1635375987005,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uj6tx4",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Kristen/Desktop/CS124/cs124_lab3/src/index.js",[],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/App.js",["31","32","33","34"],"import './App.css';\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport Alert from \"./Alert\";\nimport DropdownButton from \"./DropdownButton\";\nimport TaskContainer from \"./TaskContainer\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport firebase from \"firebase/compat\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCd9qqxvMpEKpBzwfWcc2tlRFa6ICaLH_s\",\n  authDomain: \"hmc-cs124-fa21-labs.firebaseapp.com\",\n  projectId: \"hmc-cs124-fa21-labs\",\n  storageBucket: \"hmc-cs124-fa21-labs.appspot.com\",\n  messagingSenderId: \"949410042946\",\n  appId: \"1:949410042946:web:0113b139a7e3cd1cc709db\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\n\nlet currentDeleteOption = \"\";\n\n// let data = [\n//   {\n//     id: 1,\n//     name: \"test\",\n//     checked: false\n//   },\n//   {\n//     id: 2,\n//     name: \"test2\",\n//     checked: false\n//   }\n// ]\n\nconst dropdownOptions = {\n  option1: \"All Tasks\",\n  option2: \"Completed Tasks\",\n  option3: \"Uncompleted Tasks\"\n}\n\nconst menuItems = [\n  {\n    id: \"view\",\n    name: \"View\"\n  },\n  {\n    id: \"trash\",\n    name: \"ðŸ—‘\",\n  }\n]\n\nfunction App() {\n  // const [tasks, setTasks] = useState(data);\n  const [showAlert, setShowAlert] = useState(false);\n  const [currView, setCurrView] = useState(\"All Tasks\");\n\n  let query = db.collection('hilnels-hmc-tasks');\n  const collection = db.collection('hilnels-hmc-tasks');\n\n  if(currView === \"All Tasks\"){\n    query = db.collection('hilnels-hmc-tasks');\n  } else if (currView === \"Completed Tasks\") {\n    query = db.collection('hilnels-hmc-tasks').where(\"checked\", \"==\", true);\n  } else {\n    query = db.collection('hilnels-hmc-tasks').where(\"checked\", \"==\", false);\n  }\n  const [value, loading, error] = useCollection(query);\n  let data = []\n\n  if (value) {\n    data = value.docs.map(e => {return { ...e.data(), id: e.id }});\n  }\n\n  function toggleModal() {\n    setShowAlert(!showAlert);\n  }\n\n  function setCurrentDeleteOption(currDelete) {\n    currentDeleteOption = currDelete;\n  }\n\n  function handleTaskNameChange(e, id) {\n    // let taskIndex = tasks.findIndex(e => e.id === id);\n    // tasks[taskIndex].name = e.target.value\n    // console.log(tasks)\n    // setTasks(tasks);\n\n    collection.doc(id).update({name: e.target.value});\n\n  }\n\n  function toggleCheckbox(id) {\n    console.log(\"in toggle checkbox\")\n    const oldChecked = data.find(e => e.id === id).checked;\n    console.log(oldChecked);\n    collection.doc(id).update({checked: !oldChecked})\n  }\n\n  function handleDeleteTasks(ids) {\n    ids.forEach(id => db.collection('hilnels-hmc-tasks').doc(id).delete());\n  }\n\n  function deleteOrView(id, option) {\n    if (id === \"trash\") {\n      if (option === \"All Tasks\") {\n        let ids = data.map(e => e.id);\n        handleDeleteTasks(ids);\n      } else if (option === \"Completed Tasks\") {\n        let ids = data.map(e => {if (e.checked) return e.id});\n        handleDeleteTasks(ids);\n      } else if (option === \"Uncompleted Tasks\") {\n        let ids = data.map(e => {if (!e.checked) return e.id});\n        handleDeleteTasks(ids);\n      }\n    }\n    if (id === \"view\") {\n      if (option === \"All Tasks\") {\n        setCurrView(\"All Tasks\")\n      } else if (option === \"Completed Tasks\") {\n        setCurrView(\"Completed Tasks\")\n      } else if (option === \"Uncompleted Tasks\") {\n        setCurrView(\"Uncompleted Tasks\")\n      }\n    }\n  }\n\n  function showTask(task) {\n    return ((currView === \"All Tasks\") || (currView === \"Completed Tasks\" && task.checked) || (currView === \"Uncompleted Tasks\" && !task.checked))\n  }\n\n  function makeNewItem() {\n    const newId = generateUniqueID();\n    collection.doc(newId).set({id: newId, name: \"Click to Enter Task\", checked: false})\n  }\n\n  return <div>\n      {\n        loading ? <div>Loading...</div> :\n      <div className=\"App\">\n        <h2>Tasks</h2>\n        {showAlert && <Alert onClose={toggleModal} onOK={() => deleteOrView(\"trash\", currentDeleteOption)} dropdownOptions={dropdownOptions}>\n          <div>\n            Are you sure you want to delete these tasks?\n          </div>\n        </Alert>}\n        <div className=\"buttons-and-tasks\">\n          <div className=\"menu-buttons-container\">\n            <div className=\"dropdown\" id=\"new-item-button\">\n              <button type=\"button\" className=\"menu-buttons\" onClick={makeNewItem}>New Item</button>\n            </div>\n            {menuItems.map(e => <DropdownButton key={e.id} setCurrentDeleteOption={setCurrentDeleteOption}  toggleModal={toggleModal} tasksData={data} {...e} options={dropdownOptions} deleteOrView={deleteOrView}/>)}\n          </div>\n          <TaskContainer handleTaskNameChange={handleTaskNameChange} tasksData={data} toggleCheckbox={toggleCheckbox}/>\n        </div>\n      </div>\n  }\n  </div>;\n}\n\nexport default App;\n","/Users/Kristen/Desktop/CS124/cs124_lab3/src/reportWebVitals.js",[],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/Alert.js",[],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/DropdownButton.js",[],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/TaskContainer.js",[],"/Users/Kristen/Desktop/CS124/cs124_lab3/src/TaskItem.js",[],{"ruleId":"35","severity":1,"message":"36","line":69,"column":26,"nodeType":"37","messageId":"38","endLine":69,"endColumn":31},{"ruleId":"39","severity":1,"message":"40","line":111,"column":30,"nodeType":"41","messageId":"42","endLine":111,"endColumn":32},{"ruleId":"39","severity":1,"message":"40","line":114,"column":30,"nodeType":"41","messageId":"42","endLine":114,"endColumn":32},{"ruleId":"35","severity":1,"message":"43","line":129,"column":12,"nodeType":"37","messageId":"38","endLine":129,"endColumn":20},"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'showTask' is defined but never used."]