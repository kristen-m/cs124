{"ast":null,"code":"var _jsxFileName = \"/Users/hilarynelson/Desktop/Interaction Design/cs124/lab2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { useState } from \"react\";\nimport { generateUniqueID } from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport ButtonsAndTasks from './ButtonsAndTasks';\nimport TaskItem from \"./TaskItem\";\nimport Alert from \"./Alert\";\nimport DropdownButton from \"./DropdownButton\";\nimport TaskContainer from \"./TaskContainer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet currentDeleteOption = \"\";\nlet data = [{\n  id: 1,\n  name: \"test\",\n  checked: false,\n  hidden: false\n}, {\n  id: 2,\n  name: \"test2\",\n  checked: false,\n  hidden: false\n}];\nconst dropdownOptions = {\n  option1: \"All Tasks\",\n  option2: \"Completed Tasks\",\n  option3: \"Uncompleted Tasks\"\n};\nconst menuItems = [{\n  id: \"view\",\n  name: \"View\"\n}, {\n  id: \"trash\",\n  name: \"ðŸ—‘\"\n}];\n\nfunction App() {\n  _s();\n\n  const [tasks, setTasks] = useState(data);\n  const [showAlert, setShowAlert] = useState(false);\n  const [view, setView] = useState(\"All Tasks\");\n\n  function toggleModal() {\n    setShowAlert(!showAlert);\n  }\n\n  function setCurrentDeleteOption(currDelete) {\n    currentDeleteOption = currDelete;\n  }\n\n  function handleAlertOK() {\n    console.log('ok');\n  }\n\n  function handleTaskNameChange(e, id) {\n    console.log(\"handling task name change!\");\n    let taskIndex = tasks.findIndex(e => e.id === id);\n    tasks[taskIndex].name = e.target.value;\n    console.log(tasks);\n    setTasks(tasks);\n  }\n\n  function hideTask(task, checkMatch) {\n    if (task.checked === checkMatch) {\n      task.hidden = true;\n    } else {\n      task.hidden = false;\n    }\n  }\n\n  function toggleCheckbox(id) {\n    tasks.find(e => e.id === id).checked = !tasks.find(e => e.id === id).checked;\n  }\n\n  function deleteOrView(id, option) {\n    if (id === \"trash\") {\n      if (option === \"All Tasks\") {\n        setTasks([]);\n      } else if (option === \"Completed Tasks\") {\n        let newTasks = tasks.filter(element => element.checked === false);\n        setTasks(newTasks);\n      } else if (option === \"Uncompleted Tasks\") {\n        let newTasks = tasks.filter(element => element.checked === true);\n        setTasks(newTasks);\n      }\n    }\n\n    if (id === \"view\") {\n      if (option === \"All Tasks\") {\n        setView(\"All Tasks\");\n      } else if (option === \"Completed Tasks\") {\n        setView(\"Completed Tasks\");\n      } else if (option === \"Uncompleted Tasks\") {\n        setView(\"Uncompelted Tasks\");\n      }\n    } // if (id === \"view\") {\n    //   console.log(\"tasks: \", tasks)\n    //   if (option === \"All Tasks\") {\n    //     tasks.forEach(e => e.hidden = false)\n    //     setTasks(tasks);\n    //   } else if (option === \"Completed Tasks\") {\n    //       tasks.forEach(e => hideTask(e, false))\n    //       console.log(\"tasks after completed\", tasks)\n    //       setTasks(tasks);\n    //    } else if (option === \"Uncompleted Tasks\") {\n    //       console.log(\"tasks after uncompleted \", tasks)\n    //       tasks.forEach(e => hideTask(e, true))\n    //       setTasks(tasks);\n    //   }\n    // }\n\n  }\n\n  function MakeNewItem() {\n    setTasks([{\n      id: generateUniqueID(),\n      name: \"Enter Task\",\n      checked: false,\n      hidden: false\n    }, ...tasks]);\n    console.log(tasks);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"app-title\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this), showAlert && /*#__PURE__*/_jsxDEV(Alert, {\n      onClose: toggleModal,\n      onOK: deleteOrView(\"trash\", currentDeleteOption),\n      dropdownOptions: dropdownOptions,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Are you sure you want to delete these tasks?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons-and-tasks\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"menu-buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown\",\n          id: \"new-item-button\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"menu-buttons\",\n            onClick: MakeNewItem,\n            children: \"New Item\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), menuItems.map(e => /*#__PURE__*/_jsxDEV(DropdownButton, {\n          setCurrentDeleteOption: setCurrentDeleteOption,\n          toggleModal: toggleModal,\n          tasksData: tasks,\n          ...e,\n          options: dropdownOptions,\n          deleteOrView: deleteOrView\n        }, e.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 33\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TaskContainer, {\n        handleTaskNameChange: handleTaskNameChange,\n        tasksData: tasks,\n        toggleCheckbox: toggleCheckbox\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"CAM5UFHtMtxXTsnUtyBOwBg7nIk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hilarynelson/Desktop/Interaction Design/cs124/lab2/src/App.js"],"names":["useState","generateUniqueID","ButtonsAndTasks","TaskItem","Alert","DropdownButton","TaskContainer","currentDeleteOption","data","id","name","checked","hidden","dropdownOptions","option1","option2","option3","menuItems","App","tasks","setTasks","showAlert","setShowAlert","view","setView","toggleModal","setCurrentDeleteOption","currDelete","handleAlertOK","console","log","handleTaskNameChange","e","taskIndex","findIndex","target","value","hideTask","task","checkMatch","toggleCheckbox","find","deleteOrView","option","newTasks","filter","element","MakeNewItem","map"],"mappings":";;;;AACA,OAAO,WAAP;AACA,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAAQC,gBAAR,QAA+B,8CAA/B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,IAAIC,mBAAmB,GAAG,EAA1B;AAEA,IAAIC,IAAI,GAAG,CACT;AACEC,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,MAFR;AAGEC,EAAAA,OAAO,EAAE,KAHX;AAIEC,EAAAA,MAAM,EAAE;AAJV,CADS,EAOT;AACEH,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,OAFR;AAGEC,EAAAA,OAAO,EAAE,KAHX;AAIEC,EAAAA,MAAM,EAAE;AAJV,CAPS,CAAX;AAeA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,OAAO,EAAE,WADa;AAEtBC,EAAAA,OAAO,EAAE,iBAFa;AAGtBC,EAAAA,OAAO,EAAE;AAHa,CAAxB;AAMA,MAAMC,SAAS,GAAG,CAChB;AACER,EAAAA,EAAE,EAAE,MADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CADgB,EAKhB;AACED,EAAAA,EAAE,EAAE,OADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CALgB,CAAlB;;AAWA,SAASQ,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAACQ,IAAD,CAAlC;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACuB,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,CAAC,WAAD,CAAhC;;AAEA,WAASyB,WAAT,GAAuB;AACrBH,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASK,sBAAT,CAAgCC,UAAhC,EAA4C;AAC1CpB,IAAAA,mBAAmB,GAAGoB,UAAtB;AACD;;AAED,WAASC,aAAT,GAAyB;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD;;AAED,WAASC,oBAAT,CAA8BC,CAA9B,EAAiCvB,EAAjC,EAAqC;AACnCoB,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,QAAIG,SAAS,GAAGd,KAAK,CAACe,SAAN,CAAgBF,CAAC,IAAIA,CAAC,CAACvB,EAAF,KAASA,EAA9B,CAAhB;AACAU,IAAAA,KAAK,CAACc,SAAD,CAAL,CAAiBvB,IAAjB,GAAwBsB,CAAC,CAACG,MAAF,CAASC,KAAjC;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACAC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;;AAED,WAASkB,QAAT,CAAkBC,IAAlB,EAAwBC,UAAxB,EAAoC;AAClC,QAAID,IAAI,CAAC3B,OAAL,KAAiB4B,UAArB,EAAiC;AAC/BD,MAAAA,IAAI,CAAC1B,MAAL,GAAc,IAAd;AACD,KAFD,MAEO;AACL0B,MAAAA,IAAI,CAAC1B,MAAL,GAAc,KAAd;AACD;AACF;;AAED,WAAS4B,cAAT,CAAwB/B,EAAxB,EAA4B;AAC1BU,IAAAA,KAAK,CAACsB,IAAN,CAAWT,CAAC,IAAIA,CAAC,CAACvB,EAAF,KAASA,EAAzB,EAA6BE,OAA7B,GAAuC,CAACQ,KAAK,CAACsB,IAAN,CAAWT,CAAC,IAAIA,CAAC,CAACvB,EAAF,KAASA,EAAzB,EAA6BE,OAArE;AACD;;AAED,WAAS+B,YAAT,CAAsBjC,EAAtB,EAA0BkC,MAA1B,EAAkC;AAChC,QAAIlC,EAAE,KAAK,OAAX,EAAoB;AAClB,UAAIkC,MAAM,KAAK,WAAf,EAA4B;AACxBvB,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,OAFD,MAEO,IAAIuB,MAAM,KAAK,iBAAf,EAAkC;AACrC,YAAIC,QAAQ,GAAGzB,KAAK,CAAC0B,MAAN,CAAaC,OAAO,IAAIA,OAAO,CAACnC,OAAR,KAAoB,KAA5C,CAAf;AACAS,QAAAA,QAAQ,CAACwB,QAAD,CAAR;AACH,OAHM,MAGA,IAAID,MAAM,KAAK,mBAAf,EAAoC;AACvC,YAAIC,QAAQ,GAAGzB,KAAK,CAAC0B,MAAN,CAAaC,OAAO,IAAIA,OAAO,CAACnC,OAAR,KAAoB,IAA5C,CAAf;AACAS,QAAAA,QAAQ,CAACwB,QAAD,CAAR;AACH;AACF;;AAED,QAAInC,EAAE,KAAK,MAAX,EAAmB;AACjB,UAAIkC,MAAM,KAAK,WAAf,EAA4B;AAC1BnB,QAAAA,OAAO,CAAC,WAAD,CAAP;AACD,OAFD,MAEO,IAAImB,MAAM,KAAK,iBAAf,EAAkC;AACvCnB,QAAAA,OAAO,CAAC,iBAAD,CAAP;AACD,OAFM,MAEA,IAAImB,MAAM,KAAK,mBAAf,EAAoC;AACzCnB,QAAAA,OAAO,CAAC,mBAAD,CAAP;AACD;AACF,KArB+B,CAuBhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;;AAED,WAASuB,WAAT,GAAuB;AACrB3B,IAAAA,QAAQ,CAAC,CAAO;AACdX,MAAAA,EAAE,EAAER,gBAAgB,EADN;AAEdS,MAAAA,IAAI,EAAE,YAFQ;AAGdC,MAAAA,OAAO,EAAE,KAHK;AAIdC,MAAAA,MAAM,EAAE;AAJM,KAAP,EAMP,GAAGO,KANI,CAAD,CAAR;AAOAU,IAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACD;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA,6BAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,EAGGE,SAAS,iBAAI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEI,WAAhB;AAA6B,MAAA,IAAI,EAAEiB,YAAY,CAAC,OAAD,EAAUnC,mBAAV,CAA/C;AAA+E,MAAA,eAAe,EAAEM,eAAhG;AAAA,6BACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADY;AAAA;AAAA;AAAA;AAAA,YAHhB,eAQE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAA0B,UAAA,EAAE,EAAC,iBAA7B;AAAA,iCACE;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,SAAS,EAAC,cAAhC;AAA+C,YAAA,OAAO,EAAEkC,WAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,EAIG9B,SAAS,CAAC+B,GAAV,CAAchB,CAAC,iBAAI,QAAC,cAAD;AAA2B,UAAA,sBAAsB,EAAEN,sBAAnD;AAA4E,UAAA,WAAW,EAAED,WAAzF;AAAsG,UAAA,SAAS,EAAEN,KAAjH;AAAA,aAA4Ha,CAA5H;AAA+H,UAAA,OAAO,EAAEnB,eAAxI;AAAyJ,UAAA,YAAY,EAAE6B;AAAvK,WAAqBV,CAAC,CAACvB,EAAvB;AAAA;AAAA;AAAA;AAAA,gBAAnB,CAJH;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAQE,QAAC,aAAD;AAAe,QAAA,oBAAoB,EAAEsB,oBAArC;AAA2D,QAAA,SAAS,EAAEZ,KAAtE;AAA6E,QAAA,cAAc,EAAEqB;AAA7F;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBD;;GA9GQtB,G;;KAAAA,G;AAgHT,eAAeA,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport ButtonsAndTasks from './ButtonsAndTasks';\nimport TaskItem from \"./TaskItem\";\nimport Alert from \"./Alert\";\nimport DropdownButton from \"./DropdownButton\";\nimport TaskContainer from \"./TaskContainer\";\n\nlet currentDeleteOption = \"\";\n\nlet data = [\n  {\n    id: 1,\n    name: \"test\",\n    checked: false,\n    hidden: false\n  },\n  {\n    id: 2,\n    name: \"test2\",\n    checked: false,\n    hidden: false\n  }\n]\n\nconst dropdownOptions = {\n  option1: \"All Tasks\",\n  option2: \"Completed Tasks\",\n  option3: \"Uncompleted Tasks\"\n}\n\nconst menuItems = [\n  {\n    id: \"view\",\n    name: \"View\"\n  },\n  {\n    id: \"trash\",\n    name: \"ðŸ—‘\",\n  }\n]\n\nfunction App() {\n  const [tasks, setTasks] = useState(data);\n  const [showAlert, setShowAlert] = useState(false);\n  const [view, setView] = useState(\"All Tasks\");\n\n  function toggleModal() {\n    setShowAlert(!showAlert);\n  }\n\n  function setCurrentDeleteOption(currDelete) {\n    currentDeleteOption = currDelete;\n  }\n\n  function handleAlertOK() {\n    console.log('ok');\n  }\n\n  function handleTaskNameChange(e, id) {\n    console.log(\"handling task name change!\")\n    let taskIndex = tasks.findIndex(e => e.id === id);\n    tasks[taskIndex].name = e.target.value\n    console.log(tasks)\n    setTasks(tasks);\n  }\n\n  function hideTask(task, checkMatch) {\n    if (task.checked === checkMatch) {\n      task.hidden = true;\n    } else {\n      task.hidden = false;\n    }\n  }\n\n  function toggleCheckbox(id) {\n    tasks.find(e => e.id === id).checked = !tasks.find(e => e.id === id).checked\n  }\n\n  function deleteOrView(id, option) {\n    if (id === \"trash\") {\n      if (option === \"All Tasks\") {\n          setTasks([])\n      } else if (option === \"Completed Tasks\") {\n          let newTasks = tasks.filter(element => element.checked === false)\n          setTasks(newTasks)\n      } else if (option === \"Uncompleted Tasks\") {\n          let newTasks = tasks.filter(element => element.checked === true)\n          setTasks(newTasks)\n      }\n    }\n\n    if (id === \"view\") {\n      if (option === \"All Tasks\") {\n        setView(\"All Tasks\")\n      } else if (option === \"Completed Tasks\") {\n        setView(\"Completed Tasks\")\n      } else if (option === \"Uncompleted Tasks\") {\n        setView(\"Uncompelted Tasks\")\n      }\n    }\n\n    // if (id === \"view\") {\n    //   console.log(\"tasks: \", tasks)\n    //   if (option === \"All Tasks\") {\n    //     tasks.forEach(e => e.hidden = false)\n    //     setTasks(tasks);\n    //   } else if (option === \"Completed Tasks\") {\n    //       tasks.forEach(e => hideTask(e, false))\n    //       console.log(\"tasks after completed\", tasks)\n    //       setTasks(tasks);\n    //    } else if (option === \"Uncompleted Tasks\") {\n    //       console.log(\"tasks after uncompleted \", tasks)\n    //       tasks.forEach(e => hideTask(e, true))\n    //       setTasks(tasks);\n    //   }\n    // }\n  }\n\n  function MakeNewItem() {\n    setTasks([      {\n      id: generateUniqueID(),\n      name: \"Enter Task\",\n      checked: false,\n      hidden: false\n    },\n      ...tasks])\n    console.log(tasks);\n  }\n\n  return (\n      <div className=\"App\">\n        <div id=\"app-title\"><h2>Tasks</h2>\n        </div>\n        {showAlert && <Alert onClose={toggleModal} onOK={deleteOrView(\"trash\", currentDeleteOption)} dropdownOptions={dropdownOptions}>\n          <div>\n            Are you sure you want to delete these tasks?\n          </div>\n        </Alert>}\n        <div className=\"buttons-and-tasks\">\n          <div className=\"menu-buttons-container\">\n            <div className=\"dropdown\" id=\"new-item-button\">\n              <button type=\"button\" className=\"menu-buttons\" onClick={MakeNewItem}>New Item</button>\n            </div>\n            {menuItems.map(e => <DropdownButton key={e.id} setCurrentDeleteOption={setCurrentDeleteOption}  toggleModal={toggleModal} tasksData={tasks} {...e} options={dropdownOptions} deleteOrView={deleteOrView}/>)}\n          </div>\n          {/*Only pass the tasks that we want to view*/}\n          <TaskContainer handleTaskNameChange={handleTaskNameChange} tasksData={tasks} toggleCheckbox={toggleCheckbox}/>\n        </div>\n\n      </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}