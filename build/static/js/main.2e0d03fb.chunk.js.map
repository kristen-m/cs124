{"version":3,"sources":["Alert.js","DropdownButton.js","TaskItem.js","TaskContainer.js","TaskListItem.js","TaskListContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","cancelButton","useRef","okButton","useEffect","current","focus","addEventListener","e","key","preventDefault","window","onClose","className","children","ref","type","onClick","onOK","DropdownButton","useState","drop","setDrop","id","name","style","display","toggleModal","updateCurrentDeleteOption","options","option1","currButton","document","getElementById","completeButton","incompleteButton","classList","remove","add","deleteOrView","option2","allButton","option3","onKeyDown","TaskItem","useMediaQuery","minWidth","priority","checked","defaultChecked","toggleCheckbox","TextField","variant","placeholder","value","onChange","handleTaskNameChange","disabled","InputProps","disableUnderline","background","marginTop","paddingBottom","fontSize","fontFamily","width","multiline","maxRows","minRows","updatePriority","target","selected","TaskContainer","tasksData","map","TaskListItem","handleTaskListNameChange","toggleListModal","updateDeleteListId","updateCurrTaskList","togglePageView","TaskListContainer","taskListData","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","dropdownOptions","menuItems","arialabel","App","sort","setSort","showAlert","setShowAlert","showListAlert","setShowListAlert","currView","setCurrView","currPage","setCurrPage","currentDeleteOption","setCurrentDeleteOption","deleteListId","setDeleteListId","currTaskList","setCurrTaskList","query","collection","taskQuery","doc","useCollection","loading","listData","taskData","docs","data","taskValue","currDelete","handleDeleteTasks","taskList","option","ids","i","length","push","forEach","delete","deleteCurrPageView","filter","task","a","b","toUpperCase","created","tabIndex","newId","generateUniqueID","set","taskCount","createdList","database","ServerValue","TIMESTAMP","console","log","update","find","hidden","oldChecked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2e0d03fb.chunk.js","sourcesContent":["import {useEffect, useRef} from \"react\";\n\n\nfunction Alert(props) {\n    const cancelButton = useRef(null);\n    const okButton = useRef(null);\n    useEffect(() => {\n        cancelButton.current.focus();\n        cancelButton.current.addEventListener(\"keydown\", (e) => {\n            //Treat tab & shift+tab the same way bc only two options\n            if(e.key ===  \"Tab\") {\n                e.preventDefault();\n                okButton.current.focus()\n            }\n        });\n        okButton.current.addEventListener(\"keydown\", (e) => {\n            //Treat tab & shift+tab the same way bc only two options\n            if(e.key === \"Tab\") {\n                e.preventDefault();\n                cancelButton.current.focus();\n            }\n        });\n        const close = (e) => {\n            if(e.key === \"Escape\"){\n                props.onClose()\n            }\n        }\n        window.addEventListener('keydown', close)\n    });\n    return (\n    <div className={\"alert-buttons\"}>\n        <div className={\"backdrop\"}>\n            <div className=\"modal\">\n                {props.children}\n                <button ref={cancelButton} className={\"alert-button alert-cancel\"} type={\"button\"} aria-label=\"Cancel Delete\"\n                        onClick={props.onClose}>\n                    Cancel\n                </button>\n                <button ref={okButton} className={\"alert-button alert-ok\"} type={\"button\"} aria-label=\"Confirm Delete\"\n                        onClick={() => {\n                            props.onOK();\n                            props.onClose();\n                        }}>\n                    OK\n                </button>\n            </div>\n        </div>\n    </div>);\n}\n\nexport default Alert;","import {useState} from \"react\";\n\nfunction DropdownButton(props) {\n    const [drop, setDrop] = useState(false);\n    let buttonLabel = \"View\";\n    return <div className=\"dropdown\" id={props.id+\"-button\"} aria-label={props.id +\" Selection Dropdown\"}>\n        <button className=\"menu-buttons\" onClick={() => {setDrop(!drop)}}>{props.name}<span className=\"small-triangle\"> ▼ </span></button>\n        <div className=\"dropdown-content\" style={{display: drop ? \"block\" : \"none\"}}>\n            <button className={props.id+\"-dropdown-item selected-dropdown-item\"}  id=\"view-all-dropdown-item\" onClick={() => {\n                if(props.id === \"Delete\") {\n                    props.toggleModal();\n                    props.updateCurrentDeleteOption(props.options.option1);\n                } else {\n                    let currButton = document.getElementById(\"view-all-dropdown-item\");\n                    let completeButton = document.getElementById(\"view-complete-dropdown-item\");                    let compButton = document.getElementById(\"view-all-dropdown-item\");\n                    let incompleteButton = document.getElementById(\"view-incomplete-dropdown-item\");\n                    completeButton.classList.remove(\"selected-dropdown-item\");\n                    incompleteButton.classList.remove(\"selected-dropdown-item\");\n                    currButton.classList.add(\"selected-dropdown-item\");\n                    props.deleteOrView(props.id, props.options.option1);\n                }\n                setDrop(!drop);\n            }} aria-label={props.id +\" \"+ props.options.option1}>{props.options.option1}</button>\n            <button className={props.id+\"-dropdown-item\"} id=\"view-complete-dropdown-item\" onClick={() => {\n                if(props.id === \"Delete\") {\n                    props.toggleModal();\n                    props.updateCurrentDeleteOption(props.options.option2);\n                } else {\n                    let currButton = document.getElementById(\"view-complete-dropdown-item\");\n                    let allButton = document.getElementById(\"view-all-dropdown-item\");\n                    let incompleteButton = document.getElementById(\"view-incomplete-dropdown-item\");\n                    allButton.classList.remove(\"selected-dropdown-item\");\n                    incompleteButton.classList.remove(\"selected-dropdown-item\");\n                    currButton.classList.add(\"selected-dropdown-item\");\n                    props.deleteOrView(props.id, props.options.option2);\n                }\n                setDrop(!drop)\n            }} aria-label={props.id+\" \"+props.options.option2}>{props.options.option2}</button>\n            <button className={props.id+\"-dropdown-item\"} id=\"view-incomplete-dropdown-item\" onClick={() => {\n                if(props.id === \"Delete\") {\n                    props.toggleModal();\n                    props.updateCurrentDeleteOption(props.options.option3);\n                } else {\n                    let currButton = document.getElementById(\"view-incomplete-dropdown-item\");\n                    let completeButton = document.getElementById(\"view-complete-dropdown-item\");\n                    let allButton = document.getElementById(\"view-all-dropdown-item\");\n                    currButton.classList.add(\"selected-dropdown-item\");\n                    allButton.classList.remove(\"selected-dropdown-item\");\n                    completeButton.classList.remove(\"selected-dropdown-item\");\n                    props.deleteOrView(props.id, props.options.option3);\n                }\n                setDrop(!drop)\n            }} onKeyDown={(e) => {\n                if(e.key === \"Tab\"){\n                    if(drop){\n                        setDrop(!drop);\n                    }\n                }\n            }\n            } aria-label={props.id+\" \"+props.options.option3}>{props.options.option3}</button>\n        </div>\n    </div>;\n}\n\nexport default DropdownButton;","import TextField from '@mui/material/TextField';\nimport { useMediaQuery } from 'react-responsive';\n\nfunction TaskItem(props) {\n    const isResized = useMediaQuery({minWidth: 400})\n\n    return <label className=\"task-item\" >\n        <div className={\"task-color\"} id={\"task-color-\" + props.priority + \"-\" + props.checked}>\n            <input type=\"checkbox\" className=\"check\" defaultChecked={props.checked} onClick={() => props.toggleCheckbox(props.id)}/>\n            <span className=\"checkmark\"></span>\n            <TextField\n                id=\"task-text-entry\"\n                variant=\"standard\"\n                placeholder=\"Click to Enter Task\"\n                value={props.name}\n                onChange={e => props.handleTaskNameChange(e, props.id)}\n                disabled={props.checked}\n                InputProps={{ disableUnderline: true,\n                                         style: { background: \"transparent\",\n                                                marginTop:\"2%\",\n                                                paddingBottom:\"10px\",\n                                                fontSize: \"8vw\",\n                                                fontFamily: \"Futura\",\n                                                width: \"80%\"} }}\n                multiline\n                maxRows={2}\n                minRows={1}\n            />\n            <select name=\"Priority\" id=\"priority\" onChange={e => props.updatePriority(props.id, e.target.value)}>\n                <option aria-label=\"high priority\" value=\"a\" selected= {\"a\"===props.priority}>High</option>\n                <option aria-label=\"medium priority\" value=\"b\" selected= {\"b\"===props.priority}>Med</option>\n                <option aria-label=\"low priority\" value=\"c\" selected= {\"c\"===props.priority}>Low</option>\n            </select>\n        </div>\n    </label>;\n}\n\nexport default TaskItem;\n","import TaskItem from './TaskItem';\n\nfunction TaskContainer(props) {\n    return <div id=\"task-container\">\n        {props.tasksData.map(e => <TaskItem key={e.id} handleTaskNameChange={props.handleTaskNameChange} {...e} toggleCheckbox={props.toggleCheckbox} updatePriority={props.updatePriority}/>)}\n    </div>;\n}\n\nexport default TaskContainer;","import TextField from '@mui/material/TextField';\n\nfunction TaskListItem(props) {\n        return <div className=\"task-list-item\" aria-label=\"Enter Task List Title\">\n            <TextField\n                id=\"task-list-text-entry\"\n                variant=\"standard\"\n                placeholder=\"Click to Enter List Name\"\n                value={props.name}\n                onChange={e => props.handleTaskListNameChange(e, props.id)}\n                disabled={props.checked}\n                aria-label=\"Enter Task List Title\"\n                InputProps={{ disableUnderline: true,\n                    style: { fontSize: 40,\n                        background: \"transparent\",\n                        width: \"100%\",\n                        marginTop:\"25px\",\n                        paddingBottom:\"10px\",\n                        fontFamily: \"Futura\",} }}\n            />\n            <span id=\"homepage-action-buttons\">\n            <button type=\"button\" aria-label={\"Delete task list \"+ props.name} className=\"task-list-options\" onClick={() => (props.toggleListModal(), props.updateDeleteListId(props.id), props.updateCurrTaskList(\"\"))}>🗑</button>\n            <button type=\"button\" aria-label={\"Enter task list \"+ props.name} className=\"task-list-options\" onClick={() => (props.togglePageView(), props.updateCurrTaskList(props.id))}>⮑</button>\n            </span>\n        </div>;\n}\n\nexport default TaskListItem;\n","import TaskListItem from './TaskListItem';\n\nfunction TaskListContainer(props) {\n    return <div id=\"task-list-container\">\n        {props.taskListData.map(e => <TaskListItem key={e.id} toggleListModal={props.toggleListModal} updateDeleteListId={props.updateDeleteListId} handleTaskListNameChange={props.handleTaskListNameChange} {...e} togglePageView={props.togglePageView} updateCurrTaskList={props.updateCurrTaskList}/>)}\n    </div>;\n}\n\nexport default TaskListContainer;","import './App.css';\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport Alert from \"./Alert\";\nimport DropdownButton from \"./DropdownButton\";\nimport TaskContainer from \"./TaskContainer\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport firebase from \"firebase/compat\";\nimport TaskListContainer from \"./TaskListContainer\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDoJ20jLJgywuuBGKRGlcUQNH0abdUQ_Pw\",\n    authDomain: \"task-list-91e71.firebaseapp.com\",\n    projectId: \"task-list-91e71\",\n    storageBucket: \"task-list-91e71.appspot.com\",\n    messagingSenderId: \"786170287003\",\n    appId: \"1:786170287003:web:00ac302dcd21562873073e\",\n    measurementId: \"G-SS8R968F1Z\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\nconst dropdownOptions = {\n    option1: \"All Tasks\",\n    option2: \"Completed Tasks\",\n    option3: \"Uncompleted Tasks\"\n}\n\nconst menuItems = [\n    {\n        id: \"view\",\n        name: \"View\",\n        arialabel: \"view tasks\"\n    },\n    {\n        id: \"Delete\",\n        name: \"🗑\",\n        arialabel: \"delete tasks\"\n    }\n]\n\nfunction App() {\n    const [sort, setSort] = useState(\"Date Created\");\n    const [showAlert, setShowAlert] = useState(false);\n    const [showListAlert, setShowListAlert] = useState(false);\n    const [currView, setCurrView] = useState(\"All Tasks\");\n    const [currPage, setCurrPage] = useState(\"home\")\n    const [currentDeleteOption, setCurrentDeleteOption] = useState(\"\");\n    const [deleteListId, setDeleteListId] = useState(\"\");\n    const [currTaskList, setCurrTaskList] = useState(\"\");\n\n    let query = db.collection('hilnels-hmc-task-lists');\n    const collection = db.collection('hilnels-hmc-task-lists');\n    let taskQuery = db.collection('hilnels-hmc-task-lists');\n\n    if (currTaskList !== \"\") {\n        taskQuery = db.collection('hilnels-hmc-task-lists').doc(currTaskList).collection(\"Tasks\");\n    }\n\n\n    const [value, loading, error] = useCollection(query);\n    let listData = []\n    let taskData = []\n\n    if (value) {\n        listData = value.docs.map(e => {\n            return {...e.data(), id: e.id}\n        });\n    }\n\n    const [taskValue, taskLoading, taskError] = useCollection(taskQuery)\n\n    if (taskValue) {\n        taskData = taskValue.docs.map(e => {\n            return {...e.data(), id: e.id}\n        })\n    }\n\n        if (currView === \"Completed Tasks\") {\n            taskData = taskData.filter(task => task.checked)\n        } else if  (currView === \"Uncompleted Tasks\") {\n            taskData = taskData.filter(task => !task.checked)\n        }\n\n        if (sort === \"Name: A to Z\") {\n            taskData = taskData.sort((a, b) => (a.name.toUpperCase() > b.name.toUpperCase()) ? 1 : -1)\n        } else if (sort === \"Name: Z to A\") {\n            taskData = taskData.sort((a, b) => (a.name.toUpperCase() < b.name.toUpperCase()) ? 1 : -1)\n        } else if (sort === \"Date Created\") {\n            taskData = taskData.sort((a, b) => (a.created > b.created) ? 1 : -1)\n        } else if (sort === \"Priority: High to Low\") {\n            taskData = taskData.sort((a, b) => (a.priority > b.priority) ? 1 : -1)\n        } else if (sort === \"Priority: Low to High\") {\n            taskData = taskData.sort((a, b) => (a.priority < b.priority) ? 1 : -1)\n        }\n\n    function toggleModal() {\n        setShowAlert(!showAlert);\n    }\n\n    function toggleListModal() {\n        setShowListAlert(!showListAlert);\n    }\n\n    function togglePageView() {\n        if (currPage === \"home\") {\n            setCurrPage(\"list\");\n        } else {\n            setCurrPage(\"home\")\n        }\n    }\n\n    function updateCurrTaskList(id) {\n        setCurrTaskList(id);\n    }\n\n    function updateCurrentDeleteOption(currDelete) {\n        setCurrentDeleteOption(currDelete);\n    }\n\n    function updateDeleteListId(currDelete) {\n        setDeleteListId(currDelete);\n    }\n\n    function handleTaskNameChange(e, id) {\n        taskData.find(task => task.id === id).name = e.target.value\n        collection.doc(currTaskList).collection(\"Tasks\").doc(id).update({name: e.target.value})\n\n    }\n\n    function handleTaskListNameChange(e, id) {\n        console.log(\"value read in was: \"+ e.target.value);\n        collection.doc(id).update({name: e.target.value});\n    }\n\n    function toggleCheckbox(id) {\n        const oldChecked = taskData.find(e => e.id === id).checked;\n        collection.doc(currTaskList).collection(\"Tasks\").doc(id).update({checked: !oldChecked})\n\n    }\n\n    function handleDeleteTasks(taskList, option) {\n        let ids = [];\n        for (let i = 0; i < taskList.length; i++) {\n            if(option === \"All Tasks\"){\n                ids.push(taskList[i]);\n            } else {\n                ids.push(taskList[i].id);\n            }\n            ids.forEach(id => collection.doc(currTaskList).collection(\"Tasks\").doc(id).delete());\n        }\n    }\n\n\n    function deleteCurrPageView(id) {\n        db.collection('hilnels-hmc-task-lists').doc(id).delete();\n    }\n\n    function deleteOrView(id, option) {\n        if (id === \"Delete\") {\n            if (option === \"All Tasks\") {\n                let ids = taskData.map(e => e.id);\n                handleDeleteTasks(ids, option);\n            } else if (option === \"Completed Tasks\") {\n                let ids = taskData.filter(e => {\n                    if (e.checked) return e.id\n                });\n                handleDeleteTasks(ids, option);\n            } else if (option === \"Uncompleted Tasks\") {\n                let ids = taskData.filter(e => {\n                    if (!e.checked) return e.id\n                });\n                handleDeleteTasks(ids, option);\n            }\n        }\n        if (id === \"view\") {\n            if (option === \"All Tasks\") {\n                setCurrView(\"All Tasks\")\n            } else if (option === \"Completed Tasks\") {\n                setCurrView(\"Completed Tasks\")\n            } else if (option === \"Uncompleted Tasks\") {\n                setCurrView(\"Uncompleted Tasks\")\n            }\n        }\n    }\n\n    function updatePriority(id, priority) {\n        taskData.find(e => e.id === id).priority = priority\n        collection.doc(currTaskList).collection(\"Tasks\").doc(id).update({priority: priority})\n    }\n\n    function makeNewItem() {\n        const newId = generateUniqueID()\n        collection.doc(currTaskList).collection(\"Tasks\").doc(newId).set({\n            id: newId,\n            name: \"\",\n            checked: false,\n            priority: \"c\",\n            created: firebase.database.ServerValue.TIMESTAMP\n        });\n    }\n\n    function makeNewTaskList() {\n        const newId = generateUniqueID();\n        collection.doc(newId).set({\n            id: newId,\n            name: \"\",\n            taskCount: 0,\n            createdList: firebase.database.ServerValue.TIMESTAMP\n        })\n    }\n\n    return <div>\n        {\n            loading ? <div>Loading ... </div> :\n                (currPage === \"home\") ?\n                <div className=\"homepage\">\n                    <h2 className=\"start\" tabIndex=\"0\" aria-label=\"Task Lists\">Task Lists</h2>\n                    <div>\n                        <button type=\"button\" className=\"new-list-button\" onClick={makeNewTaskList} aria-label=\"Create a new task list\">New Task List\n                        </button>\n                    </div>\n                    <TaskListContainer toggleListModal={toggleListModal} updateDeleteListId={updateDeleteListId} deleteCurrPageView={deleteCurrPageView} handleTaskListNameChange={handleTaskListNameChange} taskListData={listData} togglePageView={togglePageView} updateCurrTaskList={updateCurrTaskList}/>\n                    {showListAlert &&\n                    <Alert onClose={toggleListModal} onOK={() => deleteCurrPageView(deleteListId)}>\n                        <div tabIndex=\"1\"> Are you sure you want to delete the task list:\n                            <div tabIndex=\"1\">\n                                {(listData.find(e => e.id === deleteListId).name) === \"\" ? \" New Task List\" : (listData.find(e => e.id === deleteListId).name)}\n                            </div>\n                        </div>\n                    </Alert>}\n                </div> :\n            <div className=\"App\">\n                        <div className=\"buttons-and-tasks\">\n                            <div id=\"fixed-buttons\">\n                                <h2 className=\"start\" tabIndex=\"0\" aria-label={(listData.find(e => e.id === currTaskList).name) === \"\" ? \" New Task List\" : (listData.find(e => e.id === currTaskList).name)}>\n                                    {(listData.find(e => e.id === currTaskList).name) === \"\" ? \" New Task List\" : (listData.find(e => e.id === currTaskList).name)}\n                                </h2>\n                                <div className=\"menu-buttons-container\">\n                                    <button type=\"button\" id=\"back-button\" className=\"menu-buttons\" onClick={togglePageView} aria-label=\"Return to Task Lists Homepage\">⮐\n                                    </button>\n                                    <div className=\"dropdown\" id=\"new-item-button\" aria-label=\"create a new task\">\n                                        <button type=\"button\" className=\"menu-buttons\" onClick={makeNewItem}>New Item\n                                        </button>\n                                    </div>\n                                    {menuItems.map(e => <DropdownButton key={e.id}\n                                                                        updateCurrentDeleteOption={updateCurrentDeleteOption}\n                                                                        toggleModal={toggleModal} tasksData={taskData} {...e}\n                                                                        options={dropdownOptions}\n                                                                        deleteOrView={deleteOrView}/>)}\n                                    <div id=\"sorting-area\">\n                                    <span>\n                                        <div id=\"sort\">\n                                            <div id=\"sort-label\">Sort By:</div>\n                                            <select name=\"sorting\" id=\"task-sorting\" aria-label=\"Sort tasks by\"\n                                                    onChange={e => setSort(e.target.value)}>\n                                                <option selected hidden>Sort By:</option>\n                                                <option value=\"Date Created\"\n                                                        selected={\"Date Created\" === sort}>Date Created</option>\n                                                <option value=\"Name: A to Z\"\n                                                        selected={\"Name: A to Z\" === sort}>Name: A to Z</option>\n                                                <option value=\"Name: Z to A\"\n                                                        selected={\"Name: Z to A\" === sort}>Name: Z to A</option>\n                                                <option value=\"Priority: High to Low\"\n                                                        selected={\"Priority: High to Low\" === sort}>Priority: High to Low</option>\n                                                <option value=\"Priority: Low to High\"\n                                                        selected={\"Priority: Low to High\" === sort}>Priority: Low to High</option>\n                                            </select>\n                                        </div>\n                                    </span>\n                                    </div>\n                                </div>\n                            </div>\n                            <TaskContainer handleTaskNameChange={handleTaskNameChange} tasksData={taskData}\n                                           toggleCheckbox={toggleCheckbox} updatePriority={updatePriority}/>\n                            {showAlert &&\n                            <Alert onClose={toggleModal} onOK={() => deleteOrView(\"Delete\", currentDeleteOption)}\n                                   dropdownOptions={dropdownOptions}>\n                                {(currentDeleteOption === \"All Tasks\") ? <div tabIndex=\"1\">\n                                        Are you sure you want to delete all {taskData.length} task(s)?\n                                    </div> :\n                                    (currentDeleteOption === \"Uncompleted Tasks\") ?\n                                        <div tabIndex=\"1\">\n                                            Are you sure you want to\n                                            delete {taskData.filter(e => !e.checked).length} uncompleted task(s)?\n                                        </div> :\n                                        <div tabIndex=\"1\">\n                                            Are you sure you want to\n                                            delete {taskData.filter(e => e.checked).length} completed task(s)?\n                                        </div>}\n                            </Alert>}\n                        </div>\n                    </div>\n            }\n    </div>;\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}