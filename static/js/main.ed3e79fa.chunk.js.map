{"version":3,"sources":["Alert.js","DropdownButton.js","TaskItem.js","TaskContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","className","children","type","onClick","onClose","onOK","DropdownButton","id","name","toggleModal","setCurrentDeleteOption","options","option1","deleteOrView","option2","option3","TaskItem","defaultChecked","checked","toggleCheckbox","defaultValue","onChange","e","handleTaskNameChange","TaskContainer","tasksData","map","currentDeleteOption","data","dropdownOptions","menuItems","App","useState","tasks","setTasks","showAlert","setShowAlert","currView","setCurrView","currDelete","option","newTasks","filter","element","generateUniqueID","console","log","taskIndex","findIndex","target","value","task","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed3e79fa.chunk.js","sourcesContent":["function Alert(props) {\n    return <div className={\"backdrop\"}>\n        <div className=\"modal\">\n            {props.children}\n            <div className=\"alert-buttons\">\n\n                <button className={\"alert-button alert-cancel\"} type={\"button\"}\n                        onClick={props.onClose}>\n                    Cancel\n                </button>\n                <button className={\"alert-button alert-ok\"} type={\"button\"}\n                        onClick={() => {\n                            props.onOK();\n                            props.onClose();\n                        }}>\n                    OK\n                </button>\n            </div>\n        </div>\n    </div>;\n}\n\nexport default Alert;","function DropdownButton(props) {\n    return <div className=\"dropdown\" id=\"view-button\">\n        <button className=\"menu-buttons\">{props.name}<span className=\"small-triangle\"> â–¼ </span></button>\n        <div className=\"dropdown-content\">\n            <button className=\"dropdown-item\" onClick={() => {\n                if(props.id === \"trash\") {\n                    props.toggleModal();\n                    props.setCurrentDeleteOption(props.options.option1);\n                } else {\n                    props.deleteOrView(props.id, props.options.option1);\n                }\n            }}>{props.options.option1}</button>\n            <button className=\"dropdown-item\" onClick={() => {\n                if(props.id === \"trash\") {\n                    props.toggleModal();\n                    props.setCurrentDeleteOption(props.options.option2);\n                } else {\n                    props.deleteOrView(props.id, props.options.option2);\n                }\n            }}>{props.options.option2}</button>\n            <button className=\"dropdown-item\" onClick={() => {\n                if(props.id === \"trash\") {\n                    props.toggleModal();\n                    props.setCurrentDeleteOption(props.options.option3);\n                } else {\n                    props.deleteOrView(props.id, props.options.option3);\n                }\n            }}>{props.options.option3}</button>\n        </div>\n    </div>;\n}\n\nexport default DropdownButton;","function TaskItem(props) {\n    return <label className=\"task-item\" >\n        <div>\n            <input type=\"checkbox\" className=\"check\" defaultChecked={props.checked} onClick={() => props.toggleCheckbox(props.id)}/>\n            <span className=\"checkmark\"></span>\n            <input defaultValue={props.name} onChange={e => props.handleTaskNameChange(e, props.id)}></input>\n        </div>\n    </label>;\n}\n\nexport default TaskItem;","import TaskItem from './TaskItem';\n\nfunction TaskContainer(props) {\n    return <div id=\"task-container\">\n        {props.tasksData.map(e => <TaskItem key={e.id} handleTaskNameChange={props.handleTaskNameChange} {...e} toggleCheckbox={props.toggleCheckbox}/>)}\n    </div>;\n}\n\nexport default TaskContainer;","import './App.css';\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport Alert from \"./Alert\";\nimport DropdownButton from \"./DropdownButton\";\nimport TaskContainer from \"./TaskContainer\";\n\nlet currentDeleteOption = \"\";\n\nlet data = [\n  {\n    id: 1,\n    name: \"test\",\n    checked: false\n  },\n  {\n    id: 2,\n    name: \"test2\",\n    checked: false\n  }\n]\n\nconst dropdownOptions = {\n  option1: \"All Tasks\",\n  option2: \"Completed Tasks\",\n  option3: \"Uncompleted Tasks\"\n}\n\nconst menuItems = [\n  {\n    id: \"view\",\n    name: \"View\"\n  },\n  {\n    id: \"trash\",\n    name: \"ðŸ—‘\",\n  }\n]\n\nfunction App() {\n  const [tasks, setTasks] = useState(data);\n  const [showAlert, setShowAlert] = useState(false);\n  const [currView, setCurrView] = useState(\"All Tasks\");\n\n  function toggleModal() {\n    setShowAlert(!showAlert);\n  }\n\n  function setCurrentDeleteOption(currDelete) {\n    currentDeleteOption = currDelete;\n  }\n\n  function handleTaskNameChange(e, id) {\n    console.log(\"handling task name change!\")\n    let taskIndex = tasks.findIndex(e => e.id === id);\n    tasks[taskIndex].name = e.target.value\n    console.log(tasks)\n    setTasks(tasks);\n  }\n\n  function toggleCheckbox(id) {\n    tasks.find(e => e.id === id).checked = !tasks.find(e => e.id === id).checked\n  }\n\n  function deleteOrView(id, option) {\n    if (id === \"trash\") {\n      if (option === \"All Tasks\") {\n          setTasks([])\n      } else if (option === \"Completed Tasks\") {\n          let newTasks = tasks.filter(element => element.checked === false)\n          setTasks(newTasks)\n      } else if (option === \"Uncompleted Tasks\") {\n          let newTasks = tasks.filter(element => element.checked === true)\n          setTasks(newTasks)\n      }\n    }\n    if (id === \"view\") {\n      if (option === \"All Tasks\") {\n        setCurrView(\"All Tasks\")\n      } else if (option === \"Completed Tasks\") {\n        setCurrView(\"Completed Tasks\")\n      } else if (option === \"Uncompleted Tasks\") {\n        setCurrView(\"Uncompleted Tasks\")\n      }\n    }\n  }\n\n  // function deleteOptions(id, option){\n  //   if (id === \"trash\") {\n  //     if (option === \"All Tasks\") {\n  //       setTasks([])\n  //     } else if (option === \"Completed Tasks\") {\n  //       let newTasks = tasks.filter(element => element.checked === false)\n  //       setTasks(newTasks)\n  //     } else if (option === \"Uncompleted Tasks\") {\n  //       let newTasks = tasks.filter(element => element.checked === true)\n  //       setTasks(newTasks)\n  //     }\n  //   }\n  // }\n  //\n  // function viewOptions(id, option) {\n  //   if (id === \"view\") {\n  //     if (option === \"All Tasks\") {\n  //       setCurrView(\"All Tasks\")\n  //     } else if (option === \"Completed Tasks\") {\n  //       setCurrView(\"Completed Tasks\")\n  //     } else if (option === \"Uncompleted Tasks\") {\n  //       setCurrView(\"Uncompleted Tasks\")\n  //     }\n  //   }\n  // }\n\n  function showTask(task) {\n    return ((currView === \"All Tasks\") || (currView === \"Completed Tasks\" && task.checked) || (currView === \"Uncompleted Tasks\" && !task.checked))\n  }\n\n  function MakeNewItem() {\n    setTasks([      {\n      id: generateUniqueID(),\n      name: \"Enter Task\",\n      checked: false,\n    },\n      ...tasks]);\n  }\n\n  return (\n      <div className=\"App\">\n        <h2>Tasks</h2>\n        {showAlert && <Alert onClose={toggleModal} onOK={() => deleteOrView(\"trash\", currentDeleteOption)} dropdownOptions={dropdownOptions}>\n          <div>\n            Are you sure you want to delete these tasks?\n          </div>\n        </Alert>}\n        <div className=\"buttons-and-tasks\">\n          <div className=\"menu-buttons-container\">\n            <div className=\"dropdown\" id=\"new-item-button\">\n              <button type=\"button\" className=\"menu-buttons\" onClick={MakeNewItem}>New Item</button>\n            </div>\n            {menuItems.map(e => <DropdownButton key={e.id} setCurrentDeleteOption={setCurrentDeleteOption}  toggleModal={toggleModal} tasksData={tasks} {...e} options={dropdownOptions} deleteOrView={deleteOrView}/>)}\n          </div>\n          <TaskContainer handleTaskNameChange={handleTaskNameChange} tasksData={tasks.filter(e => showTask(e))} toggleCheckbox={toggleCheckbox}/>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}